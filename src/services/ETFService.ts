// services/ETFService.ts
// ETF WebSocket Push Ï†ÑÏö© ÏÑúÎπÑÏä§

import { BaseService } from './BaseService';
import { ETFData, WebSocketMessage } from './types';

export class ETFService extends BaseService {
  private connection: WebSocket | null = null;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private reconnectAttempts = 0;
  private lastReconnectTime = 0;

  protected getServiceName(): string {
    return 'ETFService';
  }

  protected getDataMode(): 'websocket' | 'api' {
    return 'websocket';
  }

  public initialize(): void {
    if (this.isInitialized) {
      // console.log('‚úÖ ETFService Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê® - Í∏∞Ï°¥ Ïó∞Í≤∞ Ïú†ÏßÄ');
      return;
    }

    if (this.isShutdown) {
      // console.log('‚ö†Ô∏è ETFServiceÍ∞Ä Ï¢ÖÎ£åÎêú ÏÉÅÌÉúÏûÖÎãàÎã§. Ïû¨ÏãúÏûëÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }

    // console.log('üöÄ ETFService Ï¥àÍ∏∞Ìôî ÏãúÏûë (WebSocket Push)');
    this.connectWebSocket();
    this.isInitialized = true;
    // console.log('‚úÖ ETFService Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  public reconnect(): void {
    // console.log('üîÑ ETFService ÏàòÎèô Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ');
    this.reconnectAttempts = 0;
    this.connectWebSocket();
  }

  public shutdown(): void {
    if (this.isShutdown) {
      // console.log('‚ö†Ô∏è ETFService Ïù¥ÎØ∏ Ï¢ÖÎ£åÎêú ÏÉÅÌÉúÏûÖÎãàÎã§.');
      return;
    }

    // console.log('üõë ETFService Ï¢ÖÎ£å ÏãúÏûë');
    this.isShutdown = true;

    // WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å
    if (this.connection) {
      // console.log('üîå ETF WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å');
      this.connection.close(1000, 'Service shutdown');
      this.connection = null;
    }

    // ÌÉÄÏûÑÏïÑÏõÉ Ï†ïÎ¶¨
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    // ÌïòÌä∏ÎπÑÌä∏ Ï†ïÎ¶¨
    this.stopHeartbeat();

    // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    this.setConnectionStatus('disconnected');
    this.subscribers.clear();
    this.lastDataCache = [];
    this.isInitialized = false;

    // console.log('‚úÖ ETFService Ï¢ÖÎ£å ÏôÑÎ£å');
  }

  private connectWebSocket(): void {
    const existingWs = this.connection;
    if (existingWs && existingWs.readyState === WebSocket.OPEN) {
      // console.log('‚úÖ ETF WebSocket Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏùå - Ïû¨Ïó∞Í≤∞ Ï§ëÎã®');
      return;
    }

    this.lastReconnectTime = Date.now();
    this.disconnectWebSocket();

    const url = this.buildWebSocketUrl();
    // console.log(`üîÑ ETF WebSocket Ïó∞Í≤∞ ÏãúÎèÑ: ${url}`);

    try {
      this.setConnectionStatus('connecting');

      const ws = new WebSocket(url);
      this.connection = ws;

      ws.onopen = () => {
        // console.log('üü¢ ETF WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ');
        this.setConnectionStatus('connected');
        this.reconnectAttempts = 0;
        this.startHeartbeat();
      };

      ws.onmessage = (event) => {
        this.handleMessage(event);
      };

      ws.onclose = (event) => {
        // console.log('üî¥ ETF WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å:', event.code, event.reason);
        this.handleConnectionClose();
      };

      ws.onerror = (error) => {
        console.error('‚ùå ETF WebSocket Ïò§Î•ò:', error);
        this.handleError('WebSocket connection error');
        this.handleConnectionClose();
      };

    } catch (error) {
      console.error('‚ùå ETF WebSocket Ïó∞Í≤∞ Ïã§Ìå®:', error);
      this.setConnectionStatus('disconnected');
      this.handleConnectionFailure();
    }
  }

  private buildWebSocketUrl(): string {
    return 'wss://api.investment-assistant.site/api/v1/ws/etf';
  }

  private disconnectWebSocket(): void {
    if (this.connection) {
      this.connection.close();
      this.connection = null;
    }

    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    this.stopHeartbeat();
    this.setConnectionStatus('disconnected');
  }

  private handleConnectionClose(): void {
    this.connection = null;
    this.setConnectionStatus('disconnected');
    this.scheduleReconnect();
  }

  private handleConnectionFailure(): void {
    this.scheduleReconnect();
  }

  private scheduleReconnect(): void {
    const currentStatus = this.connectionStatus;

    const timeSinceLastReconnect = Date.now() - this.lastReconnectTime;
    if (timeSinceLastReconnect < 10000) {
      // console.log('‚ö†Ô∏è ETF ÎÑàÎ¨¥ Îπ†Î•∏ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ - 10Ï¥à ÎåÄÍ∏∞');
      return;
    }

    if (currentStatus === 'reconnecting' || currentStatus === 'connecting' || currentStatus === 'connected') {
      // console.log(`‚ö†Ô∏è ETF Ïù¥ÎØ∏ ${currentStatus} ÏÉÅÌÉú - Ïû¨Ïó∞Í≤∞ Ï§ëÎã®`);
      return;
    }
    
    if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {
      console.error('‚ùå ETF ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º - Ïó∞Í≤∞ Ìè¨Í∏∞');
      this.setConnectionStatus('disconnected');
      return;
    }

    const delay = Math.min(this.config.baseReconnectDelay * Math.pow(2, this.reconnectAttempts), 30000);
    // console.log(`‚è∞ ETF ${delay}ms ÌõÑ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ (${this.reconnectAttempts + 1}/${this.config.maxReconnectAttempts})`);

    this.reconnectAttempts++;
    this.setConnectionStatus('reconnecting');

    this.reconnectTimeout = setTimeout(() => {
      const currentStatus = this.connectionStatus;
      if (currentStatus === 'connected') {
        // console.log('‚è≠Ô∏è ETF Ïù¥ÎØ∏ Ïó∞Í≤∞Îê® - Ïû¨Ïó∞Í≤∞ Ï§ëÎã®');
        return;
      }
      
      if (currentStatus !== 'reconnecting') {
        // console.log(`üö´ ETF Ïû¨Ïó∞Í≤∞ Ï∑®ÏÜå - ÌòÑÏû¨ ÏÉÅÌÉú: ${currentStatus}`);
        return;
      }
      
      // console.log('üîÑ ETF WebSocket Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ');
      this.connectWebSocket();
    }, delay);
  }

  private startHeartbeat(): void {
    this.stopHeartbeat();

    this.heartbeatInterval = setInterval(() => {
      if (this.connection && this.connection.readyState === WebSocket.OPEN) {
        try {
          this.connection.send(JSON.stringify({ action: 'heartbeat' }));
        } catch (error) {
          console.error('‚ùå ETF heartbeat Ï†ÑÏÜ° Ïã§Ìå®:', error);
          this.handleConnectionClose();
        }
      } else {
        // console.log('üíî ETF WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Ïù¥ÏÉÅ');
        this.stopHeartbeat();
        this.handleConnectionClose();
      }
    }, 60000);
  }

  private stopHeartbeat(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  private handleMessage(event: MessageEvent): void {
    try {
      const message: WebSocketMessage = JSON.parse(event.data);
      
      if (message.type === 'heartbeat_response') {
        return;
      }

      if (message.type === 'status') {
        // console.log('üìä ETF ÏÉÅÌÉú:', message);
        return;
      }

      switch (message.type) {
        case 'etf':
          if (message.data) {
            const transformedData = this.transformWebSocketData(message.data);
            this.updateCache(transformedData);
            this.emitEvent('etf_update', transformedData);
            // console.log(`üìä ETF push Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${transformedData.length}Í∞ú`);
          }
          break;
        default:
          // console.log('üì® ETF Ïïå Ïàò ÏóÜÎäî Î©îÏãúÏßÄ ÌÉÄÏûÖ:', message.type);
      }

    } catch (error) {
      console.error('‚ùå ETF Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', error);
    }
  }

  private transformWebSocketData(data: any[]): ETFData[] {
    return data.map((item, index) => ({
      symbol: item.symbol || item.ticker || '',
      name: item.name || item.etf_name || item.description || item.symbol,
      current_price: item.current_price || item.price || item.last_price || 0,
      change_amount: item.change_amount || item.change || item.price_change || 0,
      change_percentage: item.change_percentage || item.change_percent || item.percent_change || 0,
      volume: item.volume || item.trading_volume || 0,
      previous_close: item.previous_close || item.prev_close,
      is_positive: item.is_positive ?? ((item.change_amount || 0) > 0),
      change_color: item.change_color || ((item.change_amount || 0) > 0 ? 'green' : (item.change_amount || 0) < 0 ? 'red' : 'gray'),
      last_updated: item.last_updated || item.updated_at,
      rank: item.rank || index + 1
    }));
  }

  // Îç∞Ïù¥ÌÑ∞ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® (WebSocket Ïû¨Ïó∞Í≤∞)
  public refreshData(): void {
    // console.log('üîÑ ETF Îç∞Ïù¥ÌÑ∞ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® (WebSocket Ïû¨Ïó∞Í≤∞)');
    this.reconnect();
  }
}
